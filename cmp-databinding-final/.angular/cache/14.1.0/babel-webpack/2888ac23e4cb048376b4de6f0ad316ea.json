{"ast":null,"code":"import _classCallCheck from \"C:/WEB/angular/cmp-databinding-final/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/WEB/angular/cmp-databinding-final/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EventEmitter, ElementRef } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nvar _c0 = [\"serverContentInput\"];\nexport var CockpitComponent = /*#__PURE__*/(function () {\n  var CockpitComponent = /*#__PURE__*/function () {\n    function CockpitComponent() {\n      _classCallCheck(this, CockpitComponent);\n\n      this.serverCreated = new EventEmitter(); // EventEmitter is a generic type\n\n      this.blueprintCreated = new EventEmitter();\n    }\n\n    _createClass(CockpitComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"onAddServer\",\n      value: function onAddServer(nameInput) {\n        this.serverCreated.emit({\n          serverName: nameInput.value,\n          // nativeElement, from elementRef type, will gives us the element it self, in our case the input element itself\n          serverContent: this.serverContentInput.nativeElement.value\n        });\n      }\n    }, {\n      key: \"onAddBlueprint\",\n      value: function onAddBlueprint(nameInput) {\n        this.blueprintCreated.emit({\n          serverName: nameInput.value,\n          serverContent: this.serverContentInput.nativeElement.value\n        });\n      }\n    }]);\n\n    return CockpitComponent;\n  }();\n\n  CockpitComponent.ɵfac = function CockpitComponent_Factory(t) {\n    return new (t || CockpitComponent)();\n  };\n\n  CockpitComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CockpitComponent,\n    selectors: [[\"app-cockpit\"]],\n    viewQuery: function CockpitComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.serverContentInput = _t.first);\n      }\n    },\n    outputs: {\n      serverCreated: \"serverCreated\",\n      blueprintCreated: \"bpCreated\"\n    },\n    decls: 17,\n    vars: 0,\n    consts: [[1, \"row\"], [1, \"col-xs-12\"], [\"type\", \"text\", 1, \"form-control\"], [\"serverNameInput\", \"\"], [\"serverContentInput\", \"\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function CockpitComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        var _r2 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"p\");\n        i0.ɵɵtext(3, \"Add new Servers or blueprints!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"label\");\n        i0.ɵɵtext(5, \"Server Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2, 3);\n        i0.ɵɵelementStart(8, \"label\");\n        i0.ɵɵtext(9, \"Server Content\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 2, 4)(12, \"br\");\n        i0.ɵɵelementStart(13, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CockpitComponent_Template_button_click_13_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          var _r0 = i0.ɵɵreference(7);\n\n          return i0.ɵɵresetView(ctx.onAddServer(_r0));\n        });\n        i0.ɵɵtext(14, \" Add Server \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CockpitComponent_Template_button_click_15_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          var _r0 = i0.ɵɵreference(7);\n\n          return i0.ɵɵresetView(ctx.onAddBlueprint(_r0));\n        });\n        i0.ɵɵtext(16, \" Add Server Blueprint \");\n        i0.ɵɵelementEnd()()();\n      }\n    }\n  });\n  return CockpitComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}